# Generated by Django 4.0.7 on 2022-12-06 09:44

from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('public_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('display_name', models.CharField(blank=True, max_length=150, null=True)),
                ('bio', models.TextField(blank=True, max_length=300, null=True)),
                ('active_subscriptions_number', models.PositiveIntegerField(default=0)),
                ('expired_subscriptions_number', models.PositiveIntegerField(default=0)),
                ('purchased_videos_number', models.PositiveIntegerField(default=0)),
                ('saved_videos_number', models.PositiveIntegerField(default=0)),
                ('btc_wallet_balance', models.DecimalField(decimal_places=50, default=0.0, max_digits=100)),
                ('usd_wallet_balance', models.DecimalField(decimal_places=10, default=0.0, max_digits=20)),
                ('payment_info', models.JSONField(null=True)),
                ('notification_settings', models.JSONField(blank=True, null=True)),
                ('blocked_accounts_number', models.PositiveIntegerField(default=0)),
                ('is_creator', models.BooleanField(default=False)),
                ('online', models.BooleanField(default=False)),
                ('last_online', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CreatorInfo',
            fields=[
                ('creator', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='creatorinfo', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('subscribers_number', models.PositiveIntegerField(default=0)),
                ('subscription_fee_currency', models.CharField(blank=True, choices=[('usd', 'United States Dollar'), ('btc', 'Bitcoin')], default='usd', max_length=3)),
                ('subscription_fee_amount', models.DecimalField(blank=True, decimal_places=50, default=0.0, max_digits=100)),
                ('is_verified', models.BooleanField(default=False)),
                ('identity', models.JSONField(blank=True, null=True)),
                ('feed_score', models.FloatField(default=1)),
            ],
        ),
    ]
